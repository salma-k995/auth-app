type Product {
    id: ID!
    name: String!
    description: String!
    price: String!
    user: User! @belongsTo
    orders: [Order!]! @belongsToMany
    image_url: String
}

extend type Query {

    products(orderBy: _ @orderBy(columns: ["created_at"])): [Product]!
        @paginate(model: "Product")
        @guard(with: "sanctum")

    showProduct(id: ID!): Product
        @guard(with: "sanctum")
        @field(resolver: "ProductQueries@showProduct")

    #  productById(id: ID! @eq): Product @find @guard(with: "sanctum")
}

extend type Mutation {
    
    createProduct(
        name: String
        description: String
        price: String!
        url: Upload!
    ): Product
        @guard(with: "sanctum")
        @validator(class: "CreateProductValidator")
        @field(resolver: "ProductMutator@createProduct")

    updateProduct(
        id: ID!
        name: String
        description: String
        price: Float
        url: Upload!
    ): String
        @guard(with: "sanctum")
        @validator(class: "UpdateProductValidator")
        @field(resolver: "ProductMutator@updateProduct")

    deleteProducts(object: [ID]!): String
        @guard(with: "sanctum")
        @field(resolver: "ProductMutator@deleteProducts")

    exportProducts(ids: [ID]): String
        @field(resolver: "ProductMutator@exportProducts")

    searchProducts(terme:String): [Product]
        @paginate(
            builder: "App\\GraphQL\\Mutations\\ProductMutator@searchProducts"
        )
}
