type User {
    id: ID!
    name: String!
    email: String
    phone: String
    email_verified_at: DateTime
    image_url: String
}

type LoginResponse {
    token: String!
    user: User
}

extend type Query {

    me: User @auth(guard: "sanctum")

    showUser(id:ID!):User @field(resolver: "UserQueries@showUser")
   # userById(id: ID! @eq): User @find
   
    users(orderBy: _ @orderBy(columns: ["created_at"])): [User]! @guard(with: "sanctum") @paginate(model: "User")

    userAllClients: [Client]
        @guard(with: "sanctum")
        @paginate(builder: "App\\GraphQL\\Queries\\UserQueries@userAllClients")

    userAllProducts: [Product]
        @guard(with: "sanctum")
        @paginate(builder: "App\\GraphQL\\Queries\\UserQueries@userAllProducts")

    userAllOrders: [Order]
        @guard(with: "sanctum")
        @paginate(builder: "App\\GraphQL\\Queries\\UserQueries@userAllOrders")
}

extend type Mutation {
    register(
        name: String
        password: String
        email: String
        password_confirmation: String
    ): User!
        @validator(class: "RegisterValidator")
        @field(resolver: "UserMutator@register")

    login(email: String!, password: String!): LoginResponse!
        @field(resolver: "UserMutator@login")

    logout: String
        @guard(with: "sanctum")
        @field(resolver: "UserMutator@logout")

    forgotPassword(email: String!): String
        @validator(class: "ForgotPasswordValidator")
        @field(resolver: "UserMutator@forgotPassword")

    confirmCode(code: String!, email: String!): String
        @field(resolver: "UserMutator@confirmCode")

    resetPassword(
        code: String!
        email: String!
        password: String!
        password_confirmation: String!
    ): User
        @validator(class: "ResetPasswordValidator")
        @field(resolver: "UserMutator@resetPassword")

    updateUser(input: editProfileInput): User!
        @guard(with: "sanctum")
        @field(resolver: "UserMutator@updateUser")

    updateUserPassword(current_password: String, password: String): User!
        @guard(with: "sanctum")
        @field(resolver: "UserMutator@updateUserPassword")

    updateUserImage(url: Upload!): User!
        @guard(with: "sanctum")
        @validator(class: "UpdateUserImageValidator")
        @field(resolver: "UserMutator@updateUserImage")

    loginSocial(
        name: String!
        email: String
        phone: String
        provider_id: String!
        provider_type: ProviderType!
        url: Upload
    ): LoginResponse! @field(resolver: "UserMutator@loginSocial")

    exportUsers(ids: [ID]): String @field(resolver: "UserMutator@exportUsers")

    searchUsers(terme:String): [User]
        @paginate(builder: "App\\GraphQL\\Mutations\\UserMutator@searchUsers")

    deleteUsers(object: [ID]!): String
       # @guard(with: "sanctum")
        @field(resolver: "UserMutator@deleteUsers")

}
