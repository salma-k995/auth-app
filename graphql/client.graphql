type Client {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    phone: String!
    password: String!
    user: User! @belongsTo
}

extend type Query {
    meClient: Client @auth(guard: "clients")

    clients: [Client]! @guard(with: "sanctum") @paginate(model: "Client")

    showClient(id: ID!): Client @field(resolver: "ClientQueries@showClient")
}

type LoginClientResponse {
    token: String!
    client: Client
}

extend type Mutation {
    registerClient(
        first_name: String!
        last_name: String!
        email: String!
        phone: String!
        password: String!
        password_confirmation: String
    ): Client
        @guard(with: "sanctum")
        @validator(class: "RegisterClientValidator")
        @field(resolver: "ClientMutator@registerClient")

    loginClient(email: String!, password: String!): LoginClientResponse
        @field(resolver: "ClientMutator@loginClient")

    updateClient(
        id: ID!
        first_name: String
        last_name: String
        email: String
        phone: String
    ): String
        @guard(with: "sanctum")
        @validator(class: "UpdateClientValidator")
        @field(resolver: "ClientMutator@updateClient")

    #  deleteClient(id: ID!): String @field(resolver: "ClientMutator@deleteClient")

    deleteClients(object:[ID]!): String
        @guard(with: "sanctum")
        @field(resolver: "ClientMutator@deleteClients")

    exportClients(ids: [ID]): String
        @field(resolver: "ClientMutator@exportClients")
}
